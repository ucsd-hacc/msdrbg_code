from sage.all import Integer, polygen, ZZ, ceil

"""
Very large parameters, for 256-bit security level, where f has 51 bits of entropy.
"""

x = polygen(ZZ)
f = x**2850 + x**2499 - x**2025 - x**1495 - x**243 + x**173
# f has roughly 51 bits of entropy
relation_coeffs = [(2850,1),(2499,1),(2025,-1),(1495,-1),(243,-1),(173,1)]

e = Integer(39)

# p generated such that f(e) == 0 mod p-1
p = Integer("0x"
"1352e7566c191082295921c08f33ebe227d7e281753cb5325912c2e7ae997466c9d0379fd31f5690687d2150c2c4e3f90e7185a1bcbc3bb52ff449dac63816b5"
"e0687a1dcf735e661dfbce70da90a44fe9e82f6ecf2f192746186de286b3c6c9eb11f485bfc8eb2139e98d1796bf6119f4376eb95826043d4de08523fc3b709a"
"af5c79f5b640e94dfb74e72119e534f0ace076faad75b4ce13ee648281d35060a97461ae8a33b82608ac87500836a2a669a368959673128b24f72723725e53e9"
"5da40e77475b748f7c059777dc7dcc951818b661c9848e01d4a72bbde9af5bdc46df82ee656f000315c3f84a4c1e393088cad1d503e45a6977d7d7bcae315749"
"4c904d8ff20d0eb8e2c4dcbc8b294132a4e776195c460f1f4ea668bdc6922aeb93693fcf2c98088e469cc577306629aa59b084d3a7fce156bdd55001f50b55b3"
"04e9fc3c19aa1377a579208229b857cdce2901c1507d34d0e10ee86f02530a20ff51e6d70d2470edd34db9c8364d89ec590efa1787990391a454dbd7abe53817"
"fb69d607809a81fbc8bc051dd158b7634e00d56d50391acdd888bdde3bc0457d5e98bf49c375aef80a7bd37b54ae1078b3d2101a801581841f5fee0074a5db4f"
"574c507ac4a75ff152f776b294038869a50f8cd25c8d772a3a834a23ae0b658be368018d57a8c4e75120103b325d3aaed546742e6ab6be6707f68d29b40d5519"
"c5229522eb4485a419becd5fc41b8a53f5a4ace6387709e90c2a841a8f75a09f6cc471b67355bdceccae31a903d1a96ffcb9c8c9be89e5f8e852269554c2b563"
"96cd5e97c2f6222316daf97342c13a7d5a3b6c0474f11320c667976ee69d1068bc97de8a45291c63d78069e0ddea812e9d70f4f39ca16cc2132c6a71f6d9a3ce"
"63fda74cab409af0b8f0ca924c391e2c6ffda7219c5e75c3e481d7486fa23027915679316f1e2ed7e67d1ba03af41a3d23e2b3dc20c218c3e7aea0862cd3c1a0"
"f7b8064428e3fa4b5760d514def9304b1901828e7f26fe4dad1d1d67bf9d654928cd162ce508942bb5810a35595c9c90f380f0bacd4b7059c4ea608cc8f44f32"
"b4d3e7307c136eb7153d57a2a0147b09b5415e902a28fabbf10b422922680774500f7e0fbf9989425c514318f35f6747efd8b9dbe27927903371a24cd10ec81b"
"6cb5ca0743e30f46e8dc48eac367bc7929fcc6ef757a3c03ec14d3059808f3b8617babb1c7d391dafee049c51b92a2cacbabe38dd6fdefd826649686e06c4300"
"dcea9faf03535a75e79319cb3e401eaddb8b239bfb439057e6d1cfc343e92936a4ec8f85453db88ec47fe936c034a1245e4d6bbcaf6897b0a942888d1eaac86c"
"09a8dedcba27c4c5548f1ccbc6f77e67498c8ed964013156c0ceb57ed7d7579ee384f71632799241dd0b3677f93b27fea2a38265ec32020101b98c5fb3e67b5b"
"3bcc578c6c6e1a32e0308ae2229173a03313169464b6d1b389631f4f448658dc5a9d60a0c7c87a7459ad47efb634fd1104f89dd82504bc64a5bbaf83f591c3cf"
"0fb0a7d972afc0cdc4e6dccbd4abcdd7aaba458a1e9258f558a44b7757f7a94fac80e16c931a4f73f3ba1f22120eb9770a76b01e4b90e9b9d2099b92dc28fdd8"
"9be42a4bd46c25bdf926961eec52deb8098c4e01e397605ee64dd25437ee198fdfd95935762a5845c80529e81226be15af6ff8a2508d5969cdd6e867a61d0650"
"02b230b2d9df0a0b7aef08ac3a28be9a4c84af228adaaa27425b996bbfd8b18143352ce0ea2eff4c7a56031912526b41abffd390711a50a45a3e811dc0245862"
"317c906f07977e8aa5b09fdc045101cce53e4fb6db11b8bad021c90f8917064358b2a982c094c378bab6d4b78f1b3c4dec5822c523b91b9749efce2f15fbf895"
"8e61d1d22448f4f8cc15cf53fa45536ff556e25bd8a85323f40156934f8d3ebc65d7cc78a9372a5c4a63d57316c301c72443868e840c629487b6c2c554de4f24"
"5ca72122e102d35113c5ffe13853190ce18ce6282bc79d1f8e514a13b6f4b11e97e00ff8aeeb497b61d6365ca6d489584e96fc1069ef670f3b0fc1860b26e2a2"
"628b4a969ee000d8fd7027f7cd79b0140d7f430b1b79093cd1db79d9738882214b9843d32726124d6ac2f52585940d05738a237d0ce187317592b07880beffd7"
"dd787c6ebd3b4afb3badbefbb1f1c3c113afbe9b6a02ebe88f0105a3dd1a8fa7105f1450d047d2a1c6b4dbb738d80331755aacd0fb8b951c31e467540726ff1c"
"b3c3ac3f3800eee956c14d0413fc94d9ded99201e07106a7030b7f2828067b9b640b425e3a3f2edc09589b9d55f6e18a4f38cfed91049b87d19d3d1ca83c79c4"
"a8055db2ab63981172c75895135de4d709e4c0606826f657586e6d1e6ea2309751db10650f80370845a3f4b156ac0638760bdf5d94bc70015a3f6e4c1a1816a2"
"e72103d1b08736710390e8470d9f1a534410c6d612dd8c6e1aa2f77cef669b3d4ff37d63134d46445d323a3afe8e9c48cf8c9f00ce737c9ba737ca07146f020e7"
)

assert f(e) % (p-1) == 0

# q an arbitrary prime of the appropriate size, with e coprime to q-1.
q = Integer("0x783f6b17d64a7fd6d80ebf1c75e55f9e2da9d19d9a5f10c282de5fdac13fd5eecd723430f830ea17f12afbef8de1f02ac1e02b1852af7db80f51222563addcdeda5e3f3b61a18711c4e22b8f1b762a57007a1554d4a585e81c4cf35d74c7c8755b4a456d271697cd81ee985d240e551e9e5bf547279d6aa079e03448ce9ce2d7")
print("q is", q.nbits(), "bits")

N = p*q
print("N is", N.nbits(), "bits")

k = N.nbits() - max(512, int(ceil(N.nbits() * 2 / e)))

e,p,q,N,k = Integer(e),Integer(p),Integer(q),Integer(N),Integer(k)

# This is a prime slightly larger than N//2^k, to speed up Groebner basis computation. Any prime of the right size will do, it's just precomputed to save time.
hints = {'grob_mod':
Integer(5803140629612628274997390979495134754483825471819735876634772458595369432125415011002028790138436649988799485530154034388684015778615180185972976269717960646447409533073130390875673131217710784880020449492973092760474860582539267533065209),
'mult': 4,
}
